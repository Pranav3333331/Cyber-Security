import tkinter as tk
from tkinter import messagebox, scrolledtext, filedialog
import matplotlib.pyplot as plt
from core import scanner
import json
import os


def start_scan():
    target = ip_entry.get()
    try:
        start_port = int(port_start.get())
        end_port = int(port_end.get())
        if start_port < 1 or end_port > 65535 or start_port > end_port:
            raise ValueError
    except ValueError:
        messagebox.showerror("Invalid Port Range", "Please enter valid start and end port numbers.")
        return

    output_text.delete(1.0, tk.END)
    output_text.insert(tk.END, f"Scanning {target} from port {start_port} to {end_port}...\n\n")
    results = scanner.run_scan(target, (start_port, end_port + 1))

    for port, info in results['ports'].items():
        output_text.insert(tk.END, f"Port {port} ({info['name']}): {info['state']}\n")
        output_text.insert(tk.END, f"  Banner: {info['banner']}\n")
        output_text.insert(tk.END, f"  Vulnerability Hint: {info['vuln_hint']}\n")
        output_text.insert(tk.END, f"  CVEs: {', '.join(info['cves']) if info['cves'] else 'None'}\n\n")

    output_text.insert(tk.END, f"\nScan completed in {results['time_taken']} seconds.\n")
    output_text.insert(tk.END, f"Operating System Guess: {results['os']}\n")

    generate_graph(results)


def generate_graph(results):
    labels = []
    sizes = []
    for port in results['ports']:
        labels.append(f"{port}/{results['ports'][port]['name']}")
        sizes.append(1)

    if labels:
        fig, ax = plt.subplots()
        ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
        ax.axis('equal')
        plt.title(f"Open Ports on {results['ip']}")
        plt.savefig("results/chart.png")
        plt.close()


def view_history():
    try:
        with open("results/scan_history.json", "r") as f:
            history = json.load(f)
        history_window = tk.Toplevel(root)
        history_window.title("Scan History")
        history_text = scrolledtext.ScrolledText(history_window, width=100, height=30)
        history_text.pack(padx=10, pady=10)
        for scan in history:
            history_text.insert(tk.END, f"Scan at {scan['scanned_at']} on {scan['ip']}\n")
            for port, info in scan['ports'].items():
                history_text.insert(tk.END, f"  {port} - {info['name']} ({info['state']}) CVEs: {', '.join(info['cves'])}\n")
            history_text.insert(tk.END, "\n")

        clear_btn = tk.Button(history_window, text="üóëÔ∏è Clear History", command=clear_history, bg="red", fg="white")
        clear_btn.pack(pady=10)
    except Exception as e:
        messagebox.showerror("Error", f"Could not load history: {e}")


def clear_history():
    try:
        with open("results/scan_history.json", "w") as f:
            json.dump([], f, indent=4)
        messagebox.showinfo("Success", "Scan history cleared.")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to clear history: {e}")


# GUI
root = tk.Tk()
root.title("Advanced Vulnerability Scanner")

frame = tk.Frame(root)
frame.pack(padx=10, pady=10)

ip_label = tk.Label(frame, text="Target IP/Host:")
ip_label.grid(row=0, column=0, sticky='w')
ip_entry = tk.Entry(frame, width=30)
ip_entry.grid(row=0, column=1, padx=5, pady=5)

port_range_label = tk.Label(frame, text="Port Range:")
port_range_label.grid(row=1, column=0, sticky='w')
port_start = tk.Entry(frame, width=10)
port_start.grid(row=1, column=1, sticky='w')
port_start.insert(0, "1")
port_end = tk.Entry(frame, width=10)
port_end.grid(row=1, column=1, sticky='e')
port_end.insert(0, "1024")

scan_button = tk.Button(frame, text="Start Scan", command=start_scan)
scan_button.grid(row=2, column=0, columnspan=2, pady=10)

history_button = tk.Button(frame, text="View History", command=view_history)
history_button.grid(row=3, column=0, columnspan=2, pady=5)

output_text = scrolledtext.ScrolledText(root, width=100, height=30)
output_text.pack(padx=10, pady=10)

if not os.path.exists("results"):
    os.makedirs("results")

root.mainloop()
