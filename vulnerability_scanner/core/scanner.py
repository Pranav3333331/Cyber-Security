import socket
import threading
import time
from datetime import datetime
import json
from core.utils import resolve_hostname, get_common_ports
import requests
import platform
import tkinter as tk
from tkinter import messagebox, filedialog, ttk
from fpdf import FPDF
import os

COMMON_PORT_HINTS = {
    21: "FTP (File Transfer Protocol) - May allow anonymous login.",
    22: "SSH - Ensure strong authentication and disable root login.",
    23: "Telnet - Unencrypted protocol, replace with SSH.",
    25: "SMTP - May allow open relay if misconfigured.",
    53: "DNS - DNS cache poisoning and amplification risks.",
    80: "HTTP - May expose outdated or vulnerable web servers.",
    110: "POP3 - Legacy protocol, may expose credentials.",
    143: "IMAP - Ensure encryption (IMAPS) is used.",
    443: "HTTPS - Check SSL/TLS configurations.",
    3306: "MySQL - Check for default credentials or remote access.",
    3389: "RDP - Vulnerable to brute force and BlueKeep (CVE-2019-0708).",
    8080: "HTTP Proxy - May expose internal services or admin panels."
}

SCAN_PROFILES = {
    "quick": (20, 1024),
    "full": (1, 65535),
    "custom": None
}

current_profile = "quick"


def get_service_name(port):
    try:
        return socket.getservbyport(port)
    except:
        return "unknown"

def grab_banner(ip, port):
    try:
        with socket.create_connection((ip, port), timeout=2) as s:
            s.settimeout(2)
            banner = s.recv(1024).decode(errors="ignore").strip()
            return banner if banner else "No banner returned"
    except:
        return "No banner returned"

def query_cves(banner):
    try:
        if not banner or banner == "No banner returned":
            return []
        response = requests.get(f"https://cve.circl.lu/api/search/{banner}", timeout=5)
        data = response.json()
        if "results" in data:
            return [cve["id"] for cve in data["results"][:3]]
        return []
    except:
        return []

def suggest_exploits(cves):
    return [f"Search Exploit DB or Metasploit for {cve}" for cve in cves]

def get_os_guess():
    try:
        return f"{platform.system()} {platform.release()}"
    except:
        return "Unknown"

def scan_port(ip, port, results):
    try:
        sock = socket.socket()
        sock.settimeout(1)
        sock.connect((ip, port))
        state = "open"
        banner = grab_banner(ip, port)
    except:
        return
    finally:
        sock.close()

    name = get_service_name(port)
    vuln_hint = COMMON_PORT_HINTS.get(port, f"Service {name} - Ensure secure configuration.")
    cves = query_cves(banner)
    exploits = suggest_exploits(cves)

    results[port] = {
        "state": state,
        "name": name,
        "banner": banner,
        "vuln_hint": vuln_hint,
        "cves": cves,
        "exploits": exploits
    }

def run_scan(target, port_range=None):
    global current_profile

    if port_range is None:
        port_range = SCAN_PROFILES.get(current_profile, (20, 1024))

    start_time = time.time()
    ip = resolve_hostname(target)
    if not ip:
        return {"error": "Could not resolve hostname."}

    results = {}
    threads = []

    for port in range(*port_range):
        thread = threading.Thread(target=scan_port, args=(ip, port, results))
        thread.start()
        threads.append(thread)

    for t in threads:
        t.join()

    duration = round(time.time() - start_time, 2)
    scan_result = {
        "ip": ip,
        "ports": dict(sorted(results.items())),
        "scanned_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "time_taken": duration,
        "os": get_os_guess(),
        "profile": current_profile
    }

    save_to_history(scan_result)
    return scan_result

def export_report_pdf(scan_result):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    pdf.cell(200, 10, txt="Vulnerability Scan Report", ln=True, align="C")
    pdf.ln(10)

    pdf.multi_cell(0, 10, txt=f"Target IP: {scan_result['ip']}\nScan Time: {scan_result['scanned_at']}\nOS Guess: {scan_result['os']}\nDuration: {scan_result['time_taken']}s\nProfile: {scan_result['profile']}")
    pdf.ln(5)

    for port, info in scan_result['ports'].items():
        pdf.multi_cell(0, 10, txt=f"Port: {port}\nState: {info['state']}\nService: {info['name']}\nBanner: {info['banner']}\nHint: {info['vuln_hint']}\nCVEs: {', '.join(info['cves'])}\nExploits: {', '.join(info['exploits'])}\n")
        pdf.ln(2)

    report_path = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
    if report_path:
        pdf.output(report_path)
        messagebox.showinfo("Exported", f"PDF report saved to {report_path}")

def save_to_history(scan_result):
    history_file = "results/scan_history.json"
    try:
        with open(history_file, "r") as f:
            history = json.load(f)
    except:
        history = []

    history.append(scan_result)
    with open(history_file, "w") as f:
        json.dump(history, f, indent=4)

def clear_scan_history():
    history_file = "results/scan_history.json"
    try:
        with open(history_file, "w") as f:
            json.dump([], f, indent=4)
        print("‚úÖ Scan history cleared successfully.")
    except Exception as e:
        print(f"‚ö†Ô∏è Failed to clear scan history: {e}")

def show_clear_history_button():
    root = tk.Tk()
    root.title("Clear Scan History")
    root.geometry("300x150")

    def on_clear():
        clear_scan_history()
        messagebox.showinfo("Success", "Scan history cleared.")

    btn = tk.Button(root, text="üóëÔ∏è Clear Scan History", command=on_clear, bg="red", fg="white", font=("Arial", 12, "bold"))
    btn.pack(pady=40)

    root.mainloop()

def enhanced_gui():
    root = tk.Tk()
    root.title("Vulnerability Scanner")
    root.geometry("600x400")

    def start_scan():
        target = entry.get()
        profile = profile_var.get()
        global current_profile
        current_profile = profile
        result = run_scan(target)
        if "error" in result:
            messagebox.showerror("Error", result["error"])
            return
        text.delete("1.0", tk.END)
        for port, info in result["ports"].items():
            text.insert(tk.END, f"Port: {port} | Service: {info['name']} | CVEs: {', '.join(info['cves'])}\n")

    tk.Label(root, text="Enter Target:").pack()
    entry = tk.Entry(root, width=40)
    entry.pack(pady=5)

    profile_var = tk.StringVar(value="quick")
    ttk.Combobox(root, textvariable=profile_var, values=list(SCAN_PROFILES.keys())).pack(pady=5)

    tk.Button(root, text="Start Scan", command=start_scan, bg="#4CAF50", fg="white").pack(pady=10)

    text = tk.Text(root, height=15, width=70)
    text.pack(pady=5)

    root.mainloop()

enhanced_gui()